######### Lists

- Not necessary a list of homogenous items.

	>>> demo_list = ["a", 1, 45, True, 6.777]

	>>> len(demo_list)
	5

	>>> r = range(1,10)
	>>> r
	range(1, 10)
	>>> list(r)
	[1, 2, 3, 4, 5, 6, 7, 8, 9]


- Accessing data in list

	friends = ["Ashley", "Matt", "Michael"]

	print(friends[0]) # 'Ashley'
	print(friends[2]) # 'Michael'
	print(friends[3]) # IndexError

	print(friends[-1]) # 'Michael'
	print(friends[-3]) # 'Ashley'

	>>> colors = ["red", 'yellow', 'blue']
	>>> "blue" in colors
	True
	>>>
	>>> "white" in colors
	False


	>>> numbers = [1, 2, 3, 4, 5]
    >>> for num in numbers:
    ...     print(num*2)


    >>> i = 0
    >>> while i < len(numbers):
    ...     print(numbers[i])
    ...     i += 1


- List methods : Append, Insert, Extend

        >>> data = [1, 2, 3]
		>>> data.append("purple")
		>>> data
		[1, 2, 3, 'purple']

		>>> data.extend([3, "red", 4])
		>>> data
		[1, 2, 3, 'purple', 3, 'red', 4]

		>>> data.insert(2, "Hi")
		>>> data
		[1, 2, 'Hi', 3, 'purple', 3, 'red', 4]


		>>> data
		[1, 2, 'Hi', 3, 'purple', 3, 'red', 'The end!', 4]
		>>> data.pop(3)
		3
		>>> data
		[1, 2, 'Hi', 'purple', 3, 'red', 'The end!', 4]
		>>> data.pop()
		4
		>>> data
		[1, 2, 'Hi', 'purple', 3, 'red', 'The end!']


		>>> data
		[1, 2, 'Hi', 'purple', 3, 'red', 'The end!']
		>>>
		>>> data.remove('purple')
		>>> data
		[1, 2, 'Hi', 3, 'red', 'The end!']
		>>>
		>>> data.remove(3)
		>>> data
		[1, 2, 'Hi', 'red', 'The end!']


		>>> data.clear()
		>>> data
		[]


		>>> names = ["colt", "blue", "arya", "lena", "colt", "selena", "pablo"]
		>>> names
		['colt', 'blue', 'arya', 'lena', 'colt', 'selena', 'pablo']
		>>> names.index("colt")
		0
		>>> names.index("colt", 1)
		4

		>>> names.count("colt")
		2
		>>> names.count("selena")
		1

		>>> names
		['pablo', 'selena', 'colt', 'lena', 'arya', 'blue', 'colt']
		>>> names.sort()
		>>> names
		['arya', 'blue', 'colt', 'colt', 'lena', 'pablo', 'selena']
		>>> names.reverse()
		>>> names
		['pablo', 'selena', 'colt', 'lena', 'arya', 'blue', 'colt']


	- join : Used to convert List to String using the " ".
				>>> words = ["Coding", "is", "Fun"]
				>>> words
				['Coding', 'is', 'Fun']
				>>> " ".join(words)
				'Coding is Fun'

    - Slices :

			>>> colors
			['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
			>>>
			>>> colors[2:]
			['yellow', 'green', 'blue', 'indigo', 'violet']
			>>>
			>>> colors[0:]
			['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
			>>> colors2 = colors[:]
			>>>
			>>> colors2
			['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
			>>>
			>>> colors2 is colors
			False		# Since it makes copies
			>>>
			>>> colors[-2:]
			['indigo', 'violet']

			>>> colors
			['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
			>>> colors[:5]
			['red', 'orange', 'yellow', 'green', 'blue']
			>>> colors[2:4]
			['yellow', 'green']


			>>> colors[0:6:2]
			['red', 'yellow', 'blue']
			>>>
			>>> colors[0::3]
			['red', 'green', 'violet']
			>>> reverse_colors = colors[5::-1]
			>>> reverse_colors
			['indigo', 'blue', 'green', 'yellow', 'orange', 'red']


			>>> numbers
			[1, 2, 3, 4, 5]
			>>> numbers[1:3] = ['a', 'b', 'c']
			>>>
			>>> numbers
			[1, 'a', 'b', 'c', 4, 5]

		    >>> string = "This is fun!"
		    >>>
		    >>> string[::-1]
		    '!nuf si sihT'
		    >>>

		    >>> colors
		    ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
		    >>> colors[1][::-1]
		    'egnaro'


######## List Comprehensions

		>>> numbers = [1,2,3,4,5]
		>>> double_num = [num*2 for num in numbers]
		>>> double_num
		[2, 4, 6, 8, 10]

		>>> name = 'sachin'
		>>> [char.upper() for char in name]
		['S', 'A', 'C', 'H', 'I', 'N']

		>>> colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
		>>>
		>>> [color.upper() for color in colors]
		['RED', 'ORANGE', 'YELLOW', 'GREEN', 'BLUE', 'INDIGO', 'VIOLET']


		>>> numbers = [1,2,3,4,5,6,7,8,9,10]
		>>> evens = [num for num in numbers if num%2 == 0]
		>>> evens
		[2, 4, 6, 8, 10]
		>>>
		>>> odds = [num for num in numbers if num%2!=0]
		>>> odds
		[1, 3, 5, 7, 9]


		>>> numbers = [1,2,3,4,5,6,7,8,9,10]
		>>> [num*2 if num % 2 == 0 else num/2 for num in numbers]	# Multiply even numbers by 2 or dvide odd numbers by 2.
		[0.5, 4, 1.5, 8, 2.5, 12, 3.5, 16, 4.5, 20]

		>>> string = "This is so much fun"
		>>> vowels = "aeiou"
		>>> with_out_vowels_string = " ".join(tmp for tmp in string if tmp not in vowels)
		>>> with_out_vowels_string
		'Ths s s mch fn'
		>>> with_out_vowels_string = [ tmp for tmp in string if tmp not in vowels]
		>>> with_out_vowels_string
		['T', 'h', 's', ' ', 's', ' ', 's', ' ', 'm', 'c', 'h', ' ', 'f', 'n']


   - Nested List :

		>>> nested_list = [[1,2,3],[4,5,6,],[7,8,9]]
		>>> nested_list
		[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
		>>> nested_list[0][2]
		3
		>>> nested_list[-1][2]
		9


   - Iterating through the list.
		>>> for i in nested_list:
		...     for j in i:
		...             print(j)
		...


   - Nested list comprehension.
			>>> nested_list
			[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
			>>> [[val for val in l] for l in nested_list]
			[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
			>>> [[print(val) for val in l ] for l in nested_list]

   - Generating the Lists using list comprehension.
		>>> board = [[num for num in range(1,4)] for val in range(1,4)]
		>>> board
		[[1, 2, 3], [1, 2, 3], [1, 2, 3]]

		>>> [["X" if num%2 != 0 else "O" for num in range(1,4)] for value in range(1,4)]
		[['X', 'O', 'X'], ['X', 'O', 'X'], ['X', 'O', 'X']]


3) For all the numbers between 1 and 100(including 100), create a variable called answer, which contains a list with all the numbers
that are divisible by 12. [12, 24, 36]
>>> answer =  [num for num in list(range(1,101)) if num % 12 == 0]

4) String not containing vowels.
>>> answer = [letter for letter in "amazing" if letter not in "aeiou"]
>>> answer
['m', 'z', 'n', 'g']



######## Dictionary

		- example :
			instructor = {
				"name": "Colt",
				"owns_dog": True,
				"num_courses": 4,
				"favorite_language": "Python",
				"is_hilarious": False,
				44: "my favorite number!"
			}

		- another_dictionary = dict(key1 = 'value1', key2 = 'value2')

    instructor["name"] # "Colt"

	instructor["thing"] # KeyError

	for value in instructor.values():
		print(value)

	for key in instructor.keys():
		print(key)

	for key,value in instructor.items():
		print(key,value)

	"name" in instructor # True
	"awesome" in instructor # False

	"Colt" in instructor.values() # True
	"Nope!" in instructor.values() # False


		d = dict(a=1,b=2,c=3)
		c = d.copy()
		c # {'a': 1, 'b': 2, 'c': 3}
		c is d # False


		d = dict(a=1,b=2,c=3)
		d['a'] # 1
		d.get('a') # 1
		d['b'] # 2
		d.get('b') # 2


		d = dict(a=1,b=2,c=3)
		d.pop() # TypeError: pop expected at least 1 arguments, got 0
		d.pop('a') # 1
		d # {'c': 3, 'b': 2}
		d.pop('e') # KeyError

		d = dict(a=1,b=2,c=3,d=4,e=5)
		d.popitem() # ('d', 4)
		d.popitem('a') # TypeError: popitem() takes no arguments (1 given)

		second # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
		second['a'] = "Amazing"
		second
		{'a': 'Amazing', 'b': 2, 'c': 3, 'd': 4, 'e': 5}


######## Dictionary Comprehensions

		numbers = dict(first=1, second=2, third=3)
		squared_numbers = {key: value ** 2 for key,value in numbers.items()}
		print(squared_numbers) # {'first': 1, 'second': 4, 'third': 9}

		>>> {num: num*2 for num in [1,2,3,4,5]}
		{1: 2, 2: 4, 3: 6, 4: 8, 5: 10}

		>>> num_list = [1,2,3,4]
		>>> {num:("even" if num % 2 == 0 else "odd") for num in num_list}
		{1: 'odd', 2: 'even', 3: 'odd', 4: 'even'}


######### Tuples

Tuple : An ordered collection or grouping of items. Same as Lists but it is immutable. Which means it cannot be changed.
Syntax : numbers = (1, 2 ,3 ,4)

>>> alphabet = (1, 2, 3, 4)
>>> alphabet
(1, 2, 3, 4)
>>> alphabet[0]
1
>>> alphabet[3]
3


- We can use tuple as key in the dictionary.

>>> location = {
...     (35.68, 39.69): "Tokyo office",
...     (40.71, 74.00): "New York",
...     (37.77, 122.41): "San Fransico"
... }
>>> location[(35.68, 39.69)]
'Tokyo office'


- We cannot use List as a dictionary.

>>> cat = {"name":"biscuit", "age":0.5}
>>> cat.items()
dict_items([('name', 'biscuit'), ('age', 0.5)])

>>> for item in cat:
...     print(item)
...
name
age

- Nested tuples :

	>>> nums = (1,2,(3,4),5)
	>>> nums
	(1, 2, (3, 4), 5)


########## Sets

- Sets are like formal mathematical sets.
- Sets do not have duplicate values.
- They are unordered. Thus cannot access items using the index.
- Sets can be used if you need to keep track of a collection of elements, but don't care about ordering or duplicates.

- Creating a sets.

		>>> s = set({1,2,3,4,5,5,5})	# Create sets using {} and .set() function.
		>>>
		>>> s1 = {1, 2, 3}				# Directly creating the sets.
		>>>
		>>> s
		{1, 2, 3, 4, 5}
		>>>
		>>> s1
		{1, 2, 3}

- Sets cannot be accessed using the indexes.

		>>> s[0]
		Traceback (most recent call last):
		  File "<stdin>", line 1, in <module>
		TypeError: 'set' object does not support indexing

- Sets are unordered.

		>>> s2 = {1, 2, 4, 'a', 'c'}
		>>>
		>>> s2
		{'c', 2, 4, 'a', 1}
		>>>

- Usecase for sets.
	- In case if you want to remove the duplicate cities.

		>>> cities = ['Pune', 'Delhi', 'London', 'Pune', 'London']
		>>>
		>>> uniq_cities = set(cities)
		>>>
		>>> uniq_cities
		{'Delhi', 'London', 'Pune'}
		>>>


- Set Union and Intersection :

		>>> math_student = {"Anushka", "Sachin", "Aradhana"}
		>>> bio_student = {"Anushka", "Avadhoot"}
		>>>
		>>> math_student | bio_student
		{'Aradhana', 'Avadhoot', 'Sachin', 'Anushka'}

		>>> math_student & bio_student
		{'Anushka'}



########### SET Comprehensions

- a SET Comprehensions and Dictionary Comprehensions. We specify a ":" in the dictionary comprehensions.

		>>> {x*2 for x in range(1,10)}
		{2, 4, 6, 8, 10, 12, 14, 16, 18}
		>>>
		>>> {x:x*2 for x in range(1,10)}
		{1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14, 8: 16, 9: 18}


- Check if a string contains all the vowels

		>>> def all_vowels_in_string(string):
		...     return len({ char for char in string if char in "aeiou"}) == 5
		...
		>>> all_vowels_in_string("sachin is great")
		False
		>>>
		>>> all_vowels_in_string("aeiou")
		True
		>>>



########### Recap ###########
- tuples are ordered collections of elements, they are immutable!
- tuples are faster than lists and useful for protecting data
- sets are unordered collections of unique values
- sets and tuples can be created with {} and () or the set() or tuple() function
- set comprehension is useful when converting other data types to a set