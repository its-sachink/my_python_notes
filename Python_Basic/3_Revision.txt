########### Functions :

	>>> def square_of_7():
	...     return 7**2
	...
	>>> sqr_7 = square_of_7()
	>>>
	>>> sqr_7
	49


	- Please take care of indentation of "return" word while writing the code.

	>>> def sum_odd_numbers(numbers):
	...     total = 0
	...     for num in numbers:
	...             if num % 2 != 0:
	...                     total = total + num
	...     return total
	...
	>>> total=sum_odd_numbers([1,2,3,4,5,6])
	>>> total
	9


	#### Default Parameters

    - Make sure the default parameter either go at the end, or every other single parameter has a default value.
	- We can't have the default parameter at the begining.

	>>> def exponent(num, power=2):
	...     return num**power
	...
	>>> exponent(2,3)
	8

	- What can default parameters be : Anything! Functions, lists, dictionaries, strings, booleans.
	- Function as a default parameters.

		>>> def add(a, b):
		...     return a+b
		...
		>>> def substract(a, b):
		...     return a-b
		...
		>>> def math(a, b,fn=add):
		...     return fn(a,b)
		>>> math(3,2,substract)
		1
		>>>


	#### Keyword Arguments

	- Here you will have to specify all the arguments values.

	- It is different from the default parameters.
    	- When you define a function and use an "=", you are setting a default parameter.
		- When you invoke a fucntion and use an "=", you are making a keywork argument.

    - The ordering does not matter here.

			>>> def full_name(first, last):
			...     return "Your name is {first} {last}"
			...
			>>>
			>>> full_name(first="Sachin", last="Kesarkar")			# The ordering does not matter here.
			'Your name is {first} {last}'
			>>>
			>>> full_name(last="Kesarkar", first="Sachin")
			'Your name is {first} {last}'

	- You can specify the Keyword arguments even when you have specified the default parameters.

		>>> def exponent(num, power=2):
		...     return num**power
		...
		>>> exponent(power=3,num=2)
		8

	#### Scope of variable

	- global : Variable not defined in a function is a global variable. we cannot directly access the global variables
	inside the function directly.

			>>> total = 0
			>>> def increment():
			...     global total
			...     total += 1
			...     return total
			...
			>>> increment()
			1

    - "nonlocal" : This is basically used in a nested functions.
		The nonlocal keyword is used to work with variables inside nested functions, where the variable should not
		belong to the inner function.

        Use the keyword nonlocal to declare that the variable is not local to the inner function.

            >>> def myfunc():
            ...     name = "outer variable"
            ...     def innerfunc():
            ...         nonlocal name
            ...         name = "still outer variable"
            ...         return name
            ...     innerfunc()
            ...     return name
            ...
            >>> value = myfunc()
            >>> print(value)
            still outer variable

    #### Documenting a function

			>>> def say_hello():
			...     """ A simple function that returns the string hello"""
			...     return "Hello !"
			...
			>>> say_hello.__doc__
			' A simple function that returns the string hello'


	#### *args :

	- *args : If you do not know how many arguments that will be passed into your function.
	        Add a * before the parameter name in the function definition.
            This way the function will receive a tuple of arguments, and can access the items accordingly:
		- Gathers remaining arguments as a tuple after *.

        >>> def sum_all_values(*args):
        ... 	print(args)
        ...
        >>> sum_all_values(1,2,3,4,5,6)
        (1, 2, 3, 4, 5, 6)
        >>> sum_all_values([1,2,3,4,5,6])
        ([1, 2, 3, 4, 5, 6],)


        >>> def sum_of_all_nums(*args):
        ...     total = 0
        ...     for num in args:
        ...         total += num
        ...     return total

        - Passing individual argument along with *args

	- We can also pass our individual arguments along with the *args.
		>>> def sum_all_nums(num1, *args):
			total = 0
			for num in args:
				total += num
			return total

		>>> print(sum_all_nums(10,5,2))		# Here first num 10 will be assigned to "num1".
		>>> 7


	###### 2 : **kwargs (keyword args)

	- **kwargs : Gathers remaining keyword arguments as a dictionary.

		>>> def fav_colors(**kwargs):
			print(kwargs)
			for person, color in kwargs.items():
				print(f"{person} favorite color is {color}")


		>>> fav_colors(sachin="orange", chimbu="purple", aradhana="red")
		{'sachin': 'orange', 'chimbu': 'purple', 'aradhana': 'red'}
		sachin favorite color is orange
		chimbu favorite color is purple
		aradhana favorite color is red


	###### 3 : Ordering Parameters.

	- There is a order we have to follow in a function declaration as below.
		1) parameters
		2) *args
		3) default parameters
		4) **kwargs

    >>> def display_info(a,b,*args, sachin="orange", **kwargs):
    ...     return [a,b,args,sachin,kwargs]
    ...
    >>> display_info(2,3,4,5,6, sachin="orange", aradhana="red", pinchu="pink")
    [2, 3, (4, 5, 6), 'orange', {'aradhana': 'red', 'pinchu': 'pink'}]

    	parameters - 2, 3
    	*args - (4,5,6) - It puts extra comma to identify it as a tuple.
    	default parameters - instructor="Sachin"
    	kwargs - {'aradhana': 'red', 'pinchu': 'pink'}


    ###### 4 : Tuple unpacking.

	- Using * as an Argument : Argument unpacking.
		- We can use * as an argument to a function to "unpack" values.

	- If we pass List of items in a function it will not be able to read individual items.

	- Same issue we get for the tuple of items.
	- Thus we will have to unpack the List/tuple using the * operator as below.

        >>> def sum_all_values(*args):
        ... 	print(args)
        ...
        >>> nums = [1,2,3,4,5,6]
        >>> sum_all_values(nums)
        ([1, 2, 3, 4, 5, 6],)
        >>> numbers = (1,2,3,4,5,6,)
        >>> sum_all_values(numbers)
        ((1, 2, 3, 4, 5, 6),)

    - After unpacking them

        >>> sum_all_values(*nums)
        (1, 2, 3, 4, 5, 6)
        >>> sum_all_values(*numbers)
        (1, 2, 3, 4, 5, 6)



    ###### 5 : Dictionary unpacking.

		- Using ** as an Argument : Dictionary unpacking.

				>>> def display_names(first, second):
					print(f"{first}")
					print(f"{second}")
					print(f"{first} says hello to {second}")


				>>> names = {"first":"Sachin", "second":"Chimbu"}
				>>>
				>>> display_names(names)
				Traceback (most recent call last):
				File "<pyshell#88>", line 1, in <module>
					display_names(names)
				TypeError: display_names() missing 1 required positional argument: 'second'
				>>>
				>>> display_names(**names)
				Sachin
				Chimbu
				Sachin says hello to Chimbu

        - Another Example :

				>>> def add_and_multiple_numbers(a,b,c,**kwargs):
					print(a + b * c)
					print(" OTHER STUFF ....")
					print(kwargs)


				>>> data = dict(a=1,b=2,c=3,d=55, name="Sachin")
				>>> add_and_multiple_numbers(**data)
				7
				OTHER STUFF ....
				{'d': 55, 'name': 'Sachin'}


    ###### Lambda :

    - Its very similar to Anonymous functions. Writing a one line of functions.

		>>> ##### Here is lambda function #####
		>>> square2 = lambda num: num * num
		>>> add = lambda a, b: a + b			#### a, b are the paramters and the return value is "a + b"
		>>>
		>>> print(square2(7))
		49
		>>> print(add(3,10))
		13


	###### Map :

	- A standard built-in function called "map" that accepts at least 2 arguments, a function and an "iterable".
		- iterable : something that can be iterated over (lists, strings, dictionaries, sets, tuples)
		- It maps a function to each elements of a iterable.


				>>> nums = [1,2,3,4,5]
				>>> nums
				[1, 2, 3, 4, 5]
				>>> doubles = map(lambda x: x*2, nums)
				>>> doubles
				<map object at 0x000002043DCCB588>
				>>> for num in doubles:
					print(num)


				2
				4
				6
				8
				10
				>>>
				>>> list(doubles)		## The map is returned only once, thus you we will have to invoke it again.
				[]
				>>> doubles = map(lambda x: x*2, nums)
				>>> list(doubles)
				[2, 4, 6, 8, 10]
				>>>


				>>> people = ["Darcy", "Christina", "Dana", "Annabel"]
				>>> peeps = map( lambda name: name.upper(), people)
				>>> list(peeps)
				['DARCY', 'CHRISTINA', 'DANA', 'ANNABEL']



	###### Filters :

	- There is a lambda for each value in iterable.
	- Returns filter object which can be converted into other iterables.
	- The object contains only the values that return True to the lambda.

	- Example :

		>>> l = [1,2,3,4,5,6,7,8,9,10]
		>>> evens = list(filter(lambda x:x%2 == 0,l))
		>>> evens
		[2, 4, 6, 8, 10]


		>>> # Get the list of names starting with character 'a'
		>>> names = ['austin', 'penny', 'anthony', 'angel', 'billy']
		>>> names
		['austin', 'penny', 'anthony', 'angel', 'billy']
		>>> a_names = filter( lambda a: a[0] == 'a', names)
		>>> list(a_names)
		['austin', 'anthony', 'angel']
		>>>


	####### Sorted :

	- Can work with any iterable item.
	- It returns a copy but does not change the contents.

		>>> nums = [4,6,2,30,55,24]
		>>> sorted(nums)
		[2, 4, 6, 24, 30, 55]
		>>> nums
		[4, 6, 2, 30, 55, 24]
		>>> sorted(nums, reverse=True)
		[55, 30, 24, 6, 4, 2]
		>>> nums
		[4, 6, 2, 30, 55, 24]
		>>> nums.sort()
		>>> nums
		[2, 4, 6, 24, 30, 55]


	######## Min, Max, Reverse

    	names = ['Arya', "Samson", "Dora", "Tim", "Ollivander"]

    	# finds the minimum length of a name in names
    	min(len(name) for name in names)
    	>> 3

    	# find the longest name itself
    	max(names, key=lambda n:len(n))
    	>> Ollivander

    - It Return a reverse iterator.

    	>>> nums = [1,2,3,4]
    	>>> nums.reverse()
    	>>> nums
    	[4, 3, 2, 1]
    	>>> list(reversed(nums))
    	[1, 2, 3, 4]
    	>>> [char for char in reversed("hello world")]
    	['d', 'l', 'r', 'o', 'w', ' ', 'o', 'l', 'l', 'e', 'h']



    ###### Len()

		- len() : Return the lenght(the number of items) of an object. The argument may be a sequence(such as a string, tuple, list, or range) or a collection(dictionary, set).

			>>> len('Hi how are you ?')
			16
			>>> len({"s":100, "r":0})
			2

		- How the lenght is calculated : There is BIF called "__len__()" which takes care of returning the len().
			>>> [1,2,3].__len__()
			3
			>>> len([1,2,3])
			3

	- We can actually override this function, to write our own version of "len" for that object.
			class SpecialList:

				def __init__(self, data):
					self.__data = data

				def __len__(self):  # JUST LOOK AT THIS LINE
					return 50


			l1 = SpecialList([1,40,30,100,30,1,2,3,4])
			l2 = SpecialList([1,3,4,5])

			print(len(l1)) #50
			>> 50
			print(len(l2)) #50
			>> 50


####### Exceptions : remaining

####### Modules : remaining