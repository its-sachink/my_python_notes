########## OOP's

		- Goal of OOP :  to encapsulate your code into logical, hierarchical groupings using classes so that you can reason about your code at a higher level.

		- for example : A poker game can have following classes.
				- Game
				- Player
				- Card
				- Deck
				- Hand
				- Chip
				- Bet

		- example : Deck {class} can have following attributes.

			- _cards         {private list attribute}	: Actual cards in a deck
			- _max_cards     {private int attribute}	: If you are having more than one deck
			- shuffle        {public method}			: To shuffle the cards with in a deck
			- deal_card      {public method}			: That will take just one card at the top
			- deal_hand      {public method}			: Will take 2,3,5 cards and will return them
			- count          {public method}			: How many cards are left in that deck

		- private : Python does not support private or public explicitly. To make any thing private we need to append it with "_" char.


    ####### The "__init__" method

		- Creating a Class : refer to init.py file.

			class Vehicle:

				def __init__(self, make, model, year):
					self.make = make
					self.model = model
					self.year = year

			v = Vehicle("Honda", "Civic", 2017)

			--------------------------------------------------------
					>>> class user:
					def __init__(self, first, last, age):
						self.first=first
						self.last=last
						self.age=age
						print(f"Class with name {first}{last} has been initiated")


				>>> user1 = user("Sachin", "Kesarkar", 34)
				Class with name SachinKesarkar has been initiated
			--------------------------------------------------------

	###### Instance Methods

        class User:
        	def __init__(self, first, last, age):
        		self.first = first
        		self.last = last
        		self.age = age

        	def full_name(self):
        		return f"{self.first} {self.last}"

        	def initials(self):
        		return f"{self.first[0]}.{self.last[0]}."

        	def likes(self, thing):
        		return f"{self.first} likes {thing}"

         user1 = User("Joe", "Smith", 68)
         user2 = User("Blanca", "Lopez", 41)

         print(user1.likes("Ice Cream"))
         print(user2.likes("Chips"))

         print(user2.initials())
         print(user1.initials())


    ######## Class attributes

        # Another class with a class attribute, used for validation purposes
        class Pet:
        	allowed = ['cat', 'dog', 'fish', 'rat']		# Class attribute, defining which animals species can be stored.
        
        	def __init__(self, name, species):
        		
        		# allowed = ['cat', 'dog', 'fish', 'rat'], if we define here it would neither be a Class attribute or Instance attribute.
        		if species not in Pet.allowed:
        			raise ValueError(f"You can't have a {species} pet!")
        		self.name = name
        		self.species = species
        
        	def set_species(self,species):
        		if species not in Pet.allowed:			# Pet.allowed means we are using a class attribute.
        			raise ValueError(f"You can't have a {species} pet!")
        		self.species = species
        
        cat = Pet("Blue", "cat")
        dog = Pet("Wyatt", "dog")



    ######## Class methods

    - Class methods are methods (with the @classmethod decorator) that are not concerned with instances, but the class itself.

    	- The first argument is cls (for class) instead of self. Like self, it does not need to be passed in explicitly.
		- Class methods are available on the class itself and any instances of the class, and are mostly used for building new instances of classes.


            class User:
            	active_users = 0

            	@classmethod
            	def display_active_users(cls):
            		return f"There are currently {cls.active_users} active users"

            	@classmethod
            	def from_string(cls, data_str):
            		first,last,age = data_str.split(",")
            		return cls(first, last, int(age))	# We are calling a constructor over here.

            	def __init__(self, first, last, age):
            		self.first = first
            		self.last = last
            		self.age = age
            		User.active_users += 1
            	def logout(self):
            		User.active_users -= 1
            		return f"{self.first} has logged out"

            	def full_name(self):
            		return f"{self.first} {self.last}"


    	    user1 = User("Joe", "Smith", 68)
            user2 = User("Blanca", "Lopez", 41)
            print(f"Active users are : {User.display_active_users()}")


######## OOP's part 2 :


    ####### Simple Inheritance :
    class Person:
      def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname
    
      def printname(self):
        print(self.firstname, self.lastname)
    
    #Use the Person class to create an object, and then execute the printname method:

    class Student(Person):
        def __init__(self, fname, lname):
            super().__init__(fname, lname)
            self.graduationyear = 2019

        def welcome(self):
            print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)

    x = Student("Mike", "Olsen")
    x.printname()


    ####### All about properties, getter and setter methods :

            class Human:
            	def __init__(self, first, last, age):
            		self.first = first
            		self.last = last
            		if age >= 0:
            			self._age = age
            		else:
            			self._age = 0

            	@property					# This is a getter.
            	def age(self):				# The name of the function "age" is the property.  Here "age" would be the property of a class.
            		return self._age

            	@age.setter
            	def age(self, new_age):		# This is a setter.
            		if new_age >= 0:
            			self._age = new_age
            		else:
            			raise ValueError("Age can't be negative.")

            	@property
            	def full_name(self):
            		return f"{self.first} {self.last}"

            	@full_name.setter
            	def full_name(self, name):
            		self.first, self.last = name.split(" ")


            jane = Human("Jane", "Goodall", 20)
            print(jane.age)	# This works like a attribute but this is a function. This is a getter function.

            jane.age = 40	# Using the setter function.
            print(jane.age)


    ########### Multiple inheritance :

        class Aquatic:
          def __init__(self,name):
            print("AQUATIC INIT!")
            self.name = name

          def swim(self):
            return f"{self.name} is swimming"

          def greet(self):
            return f"I am {self.name} of the sea!"



        class Ambulatory:				# Ambulatory means walking animal.
          def __init__(self,name):
            print("AMBULATORY INIT!")
            self.name = name

          def walk(self):
            return f"{self.name} is walking"

          def greet(self):
            return f"I am {self.name} of the land!"



        class Penguin(Ambulatory, Aquatic):		# Multiple inheritance, penguin is both swimming and Ambulatory(walking)
          def __init__(self,name):
            print("PENGUIN INIT!")
            super().__init__(name=name)			# This calls Ambulatory __init__()



######## Iterators and Generators :

    - Iterators are objects that can be iterated upon.
    - Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.
    - Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.

    - An object is called iterable if we can get an iterator from it.
    - list, tuple, string etc. are iterables. The iter() function (which in turn calls the __iter__() method) returns an iterator from them.

     ----------------------------------------------------------
        # define a list
        my_list = [4, 7, 0, 3]

        # get an iterator using iter()
        my_iter = iter(my_list)

        # iterate through it using next()

        # Output: 4
        print(next(my_iter))

        # Output: 7
        print(next(my_iter))

        # next(obj) is same as obj.__next__()

        # Output: 0
        print(my_iter.__next__())

        # Output: 3
        print(my_iter.__next__())

        # This will raise StopIteration  error, no items left
        next(my_iter)

        4
        7
        0
        3
        Traceback (most recent call last):
          File "<string>", line 24, in <module>
            next(my_iter)
        StopIteration
     -------------------------------------------------------------

     Other way to iterate through is using "for" loop.

     -------------------------------------------------------------
        >>> for element in my_list:
        ...     print(element)
        ...
        4
        7
        0
        3
     -------------------------------------------------------------

     Or the other way is, iter_obj by calling iter() on the iterable.

     -------------------------------------------------------------
        # create an iterator object from that iterable
        iter_obj = iter(iterable)

        # infinite loop
        while True:
            try:
                # get the next item
                element = next(iter_obj)
                # do something with element
            except StopIteration:
                # if StopIteration is raised, break from loop
                break
     -------------------------------------------------------------



    ###### Building Custom Iterators :

    - To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object.
    - The __iter__() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.
    - The __next__() method also allows you to do operations, and must return the next item in the sequence.

    - To prevent the iteration to go on forever, we can use the "StopIteration" statement.

    - Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):

     -------------------------------------------------------------
        class MyNumbers:
          def __iter__(self):
            self.a = 1
            return self

          def __next__(self):
            if self.a <= 20:
              x = self.a
              self.a += 1
              return x
            else:
              raise StopIteration

        myclass = MyNumbers()
        myiter = iter(myclass)

        for x in myiter:
          print(x)
     -------------------------------------------------------------


     ######## Generators :

        - There is a lot of work in building an iterator in Python. We have to implement a class with __iter__() and __next__() method, keep track of internal states, and raise StopIteration when there are no values to be returned.
        - Python generators are a simple way of creating iterators. All the work we mentioned above are automatically handled by generators in Python.
        - a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).


        - If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function.
        - The difference is that while a return statement terminates a function entirely, yield statement pauses the function saving all its states and later continues from there on successive calls.


    - Differences between Generator function and Normal function :
        - Generator function contains one or more yield statements.
        - Once the function yields, the function is paused and the control is transferred to the caller.
        - Local variables and their states are remembered between successive calls.
        - Finally, when the function terminates, "StopIteration" is raised automatically on further calls.

     -------------------------------------------------------------
        def rev_str(my_str):
            length = len(my_str)
            for i in range(length - 1, -1, -1):
                yield my_str[i]



        # For loop to reverse the string
        for char in rev_str("hello"):
            print(char)

        o
        l
        l
        e
        h
     -------------------------------------------------------------

        ###### Python Generator Expression :

        Similar to the lambda functions which create anonymous functions, generator expressions create anonymous generator functions.
        The syntax for generator expression is similar to that of a list comprehension in Python. But the square brackets are replaced with round parentheses.
        a list comprehension produces the entire list while the generator expression produces one item at a time.

     -------------------------------------------------------------
        # Initialize the list
        my_list = [1, 3, 6, 10]

        # square each term using list comprehension
        list_ = [x**2 for x in my_list]

        # same thing can be done using a generator expression
        # generator expressions are surrounded by parenthesis ()
        generator = (x**2 for x in my_list)

                - Here is how we can start getting items from the generator:

        # Initialize the list
        my_list = [1, 3, 6, 10]

        a = (x**2 for x in my_list)
        print(next(a))

        print(next(a))

        print(next(a))

        print(next(a))

        next(a)
     -------------------------------------------------------------

        - Generator expressions can be used as function arguments. When used in such a way, the round parentheses can be dropped.

     -------------------------------------------------------------
        >>> sum(x**2 for x in my_list)
        146

        >>> max(x**2 for x in my_list)
        100
     -------------------------------------------------------------


########## Decorators remaining :

